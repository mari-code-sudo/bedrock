name: 'Foundation Pipeline Template'

on:
  workflow_call: 
    inputs:
      destroy:
        description: If the action should destory the TF changes
        type: boolean
        default: false 
      apply:
        description: Flag to indicate if Terraform should apply the changes or not 
        type: boolean
        default: false 
      tfvarsFileName:
        description: The environment specific tfvars file
        type: string
        required: true  
      environmentName:
        description: The environment name to use
        type: string
        required: true  
      workingDirectory:
        description: The working directory to use
        type: string
        required: true     
      createPlan:
        description: Flag to indicate if a Terraform plan should be created
        type: boolean
        default: true
      doChecks:
        description: Flag to indicate if checks should be performed
        type: boolean
        default: true
      version:
        description: The version of Terraform to use
        type: string
        required: true
         
    secrets:
      AWS_ACCESS_KEY_ID: 
        description: The Azure client ID
        required: true
      AWS_SECRET_ACCESS_KEY: 
        description: The Azure client secret
        required: true
      

jobs:
  terraform-deploy:
    name: "AWS Job"
    runs-on: [self-hosted, linux, x64, philips-code-hub, ubuntu-latest]
    environment: ${{ inputs.environmentName }}
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      #TF_LOG: DEBUG
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.terraform-info.outputs.tf-version }}
          terraform_wrapper: false

      - name: Get terraform version
        run: terraform version
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: "Configure Terraform"
        run: |
            terraform init \
              -backend-config "encrypt=true" \
              -backend-config "bucket=${{ vars.TERRAFORM_STATE_BUCKET_NAME }}" \
              -backend-config "region=${{ vars.AWS_REGION }}" \
              -backend-config "access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -backend-config "secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -backend-config "key=${{ vars.TERRAFORM_STATE_KEY }}" \
              -backend-config "dynamodb_table=${{ vars.TERRAFORM_LOCK_DYNAMODB_TABLE_NAME}}" 
        working-directory: ${{ inputs.workingDirectory }}
      
      - name: "Validate Terraform configurations"
        run: terraform validate
        working-directory: ${{ inputs.workingDirectory }}

      - name: "Format Terraform configuration (Lint)"
        run: terraform fmt -check -recursive
        working-directory: ${{ inputs.workingDirectory }}
        if: ${{ inputs.doChecks == true }}

      # Perform a security scan of the terraform code using checkov
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with: 
          framework: terraform
          directory: ${{ inputs.workingDirectory }}
        if: ${{ inputs.doChecks == true }}

      - name: "Plan Terraform deployment"
        if: ${{ inputs.createPlan == true }}
        run: |
          if ${{ inputs.destroy == true }}; then
            terraform plan -input=false -lock=true -destroy -out=tfplan -var-file=${{ inputs.tfvarsFileName }} -var "aws_access_key==${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          else 
            terraform plan -input=false -lock=true -out="tfplan" -var-file=${{ inputs.tfvarsFileName }} -var-file=${{ inputs.tfvarsFileName }} -var "aws_access_key==${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          fi
        working-directory: ${{ inputs.workingDirectory }}
      
      - name: "Install pip3 (Optional)"
        if: ${{ inputs.doChecks == true }}
        run: |
          if ! command -v pip3 &> /dev/null
          then
              echo "pip3 could not be found"
              echo "Installing pip3..."
              curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
              python3 get-pip.py
          else
              echo "pip3 is already installed"
          fi

      - name: Install Terraform Compliance
        if: ${{ inputs.doChecks == true }}
        run: |
          pip3 install terraform-compliance

      - name: "Run Compliance tests"
        if: ${{ inputs.doChecks == true }}
        run: | 
              terraform-compliance -f compliance-policies . -p "tfplan" \
               -v -x -S -M -o junit -O terraform-compliance-report.xml
        working-directory: ${{ inputs.workingDirectory }}

      # Save plan to artifacts  
      - name: Publish Terraform Plan
        if: ${{ inputs.createPlan == true && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environmentName }}-tfplan-${{ inputs.version }}
          path: ${{ inputs.workingDirectory }}/tfplan
          
      # Create string output of Terraform Plan
      - name: Create String Output
        if: ${{ inputs.createPlan == true }}
        id: tf-plan-string
        run: |
          cd ${{ inputs.workingDirectory }}
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output for AWS-${{inputs.environmentName}}" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        if: ${{ inputs.createPlan == true }}      
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ inputs.workingDirectory }}

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })
                  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan from same job
        # if createPlan is true, then we don't need donwload the plan because its already available.
        if: ${{ inputs.apply == true && inputs.createPlan == false }} 
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.environmentName }}-tfplan-${{ inputs.version }}
          path: ${{ inputs.workingDirectory }}
          
      # Terraform Apply - Applicable to destroy also
      - name: Terraform Apply
        if:  ${{ inputs.apply == true }}
        run: terraform apply tfplan  
        working-directory: ${{ inputs.workingDirectory }}